let dts = '// This is auto-generated by natcall.js DO NOT EDIT!\n';
module.exports = [{
    name: 'GETREGS', // GETREGS(): RegsID
    args: [],
    rets: 'number',
    argNm: []
}, {
    name: 'WRREG', // WRREG(RegsID, reg, val),
    args: ['number', 'string', 'number'],
    rets: 'void',
    argNm: ['RegsID', 'reg', 'val']
}, {
    name: 'RDREG', // RDREG(RegsID, reg): regVal
    args: ['number', 'string'],
    rets: 'number',
    argNm: ['RegsID', 'reg']
}, {
    name: 'BIOS_INT', // BIOS_INT(RegsID, vec)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['RegsID', 'vec']
}, {
    name: 'RDMEM', // RDMEM(addr): val
    args: ['number'],
    rets: 'number',
    argNm: ['addr']
}, {
    name: 'WRMEM', // WRMEM(addr, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['addr', 'val']
}, {
    name: 'WRMEM16', // WRMEM16(addr, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['addr', 'val']
}, {
    name: 'WRMEM32', // WRMEM32(addr, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['addr', 'val']
}, {
    name: 'DUMPMEM', // DUMPMEM()
    args: [],
    rets: 'void',
    argNm: []
}, {
    name: 'MOUSEX', // MOUSEX(): x
    args: [],
    rets: 'number',
    argNm: []
}, {
    name: 'MOUSEY', // MOUSEY(): y
    args: [],
    rets: 'number',
    argNm: []
}, {
    name: 'GET_BIOSBUF_ADDR', // GET_BIOSBUF_ADDR(): biosBufAddress
    args: [],
    rets: 'number',
    argNm: []
}, {
    name: 'PUTC', // GET_BIOSBUF_ADDR(chr)
    args: ['number'],
    rets: 'void',
    argNm: ['chr']
}, {
    name: 'INB', // INB(port): val
    args: ['number'],
    rets: 'number',
    argNm: ['port']
}, {
    name: 'INW', // INW(port): val
    args: ['number'],
    rets: 'number',
    argNm: ['port']
}, {
    name: 'IND', // IND(port): val
    args: ['number'],
    rets: 'number',
    argNm: ['port']
}, {
    name: 'OUTB', // OUTB(port, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['port', 'val']
}, {
    name: 'OUTW', // OUTW(port, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['port', 'val']
}, {
    name: 'OUTD', // OUTD(port, val)
    args: ['number', 'number'],
    rets: 'void',
    argNm: ['port', 'val']
}];
for ({name, args, rets, argNm} of module.exports) {
    dts += `declare function Nat_${name}(${args.map((e,i) => `${argNm[i]}: ${e}`).join(', ')})${rets == 'void' ? '' : ': ' + rets};\n`;
}
require('fs').writeFileSync('src/natcall.d.ts', dts);